@page "/settings"
@using IrcChat.Shared.Models
@using IrcChat.Client.Services
@using IrcChat.Client.Components
@inject HttpClient Http
@inject UnifiedAuthService Auth
@inject NavigationManager Navigation
@inject IJSRuntime JS

<PageTitle>Param√®tres - IRC Chat</PageTitle>

@if (!isInitialized)
{
    <div class="loading-fullscreen">
        <div class="spinner"></div>
        <p>Chargement...</p>
    </div>
}
else if (!Auth.HasUsername)
{
    <p>Redirection...</p>
}
else
{
    <div class="settings-page">
        <div class="settings-header">
            <button class="back-button" @onclick="GoBack">
                <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <line x1="19" y1="12" x2="5" y2="12"></line>
                    <polyline points="12 19 5 12 12 5"></polyline>
                </svg>
                Retour
            </button>
            <h1>Param√®tres</h1>
        </div>

        <div class="settings-container">
            <!-- Section Profil -->
            <div class="settings-card">
                <div class="card-header">
                    <h2>üë§ Profil</h2>
                </div>
                <div class="card-content">
                    <div class="profile-section">
                        @if (!string.IsNullOrEmpty(Auth.AvatarUrl))
                        {
                            <img src="@Auth.AvatarUrl" alt="Avatar" class="profile-avatar" />
                        }
                        else
                        {
                            <div class="avatar-placeholder">üë§</div>
                        }
                        <div class="profile-info">
                            <h3>@Auth.Username</h3>
                            @if (Auth.IsReserved)
                            {
                                <div class="profile-badges">
                                    <span class="badge badge-verified">‚úì Pseudo r√©serv√©</span>
                                    @if (Auth.IsAdmin)
                                    {
                                        <span class="badge badge-admin">‚ö° Administrateur</span>
                                    }
                                </div>
                                <p class="profile-email">@Auth.Email</p>
                                <p class="profile-provider">Connect√© via @Auth.ReservedProvider</p>
                            }
                            else
                            {
                                <span class="badge badge-guest">Invit√©</span>
                                <p class="profile-hint">Votre pseudo n'est pas prot√©g√©</p>
                            }
                        </div>
                    </div>
                </div>
            </div>

            <!-- Section Admin -->
            @if (Auth.IsAdmin && Auth.UserId.HasValue)
            {
                <div class="settings-card card-admin">
                    <div class="card-header">
                        <h2>‚ö° Administration</h2>
                    </div>
                    <div class="card-content">
                        <p class="card-description">G√©rez les utilisateurs et leurs permissions</p>
                        <button class="btn btn-admin" @onclick="OpenAdminPanel">
                            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                <path d="M12 15a3 3 0 100-6 3 3 0 000 6z" />
                                <path d="M19.4 15a1.65 1.65 0 00.33 1.82l.06.06a2 2 0 010 2.83 2 2 0 01-2.83 0l-.06-.06a1.65 1.65 0 00-1.82-.33 1.65 1.65 0 00-1 1.51V21a2 2 0 01-2 2 2 2 0 01-2-2v-.09A1.65 1.65 0 009 19.4a1.65 1.65 0 00-1.82.33l-.06.06a2 2 0 01-2.83 0 2 2 0 010-2.83l.06-.06a1.65 1.65 0 00.33-1.82 1.65 1.65 0 00-1.51-1H3a2 2 0 01-2-2 2 2 0 012-2h.09A1.65 1.65 0 004.6 9a1.65 1.65 0 00-.33-1.82l-.06-.06a2 2 0 010-2.83 2 2 0 012.83 0l.06.06a1.65 1.65 0 001.82.33H9a1.65 1.65 0 001-1.51V3a2 2 0 012-2 2 2 0 012 2v.09a1.65 1.65 0 001 1.51 1.65 1.65 0 001.82-.33l.06-.06a2 2 0 012.83 0 2 2 0 010 2.83l-.06.06a1.65 1.65 0 00-.33 1.82V9a1.65 1.65 0 001.51 1H21a2 2 0 012 2 2 2 0 01-2 2h-.09a1.65 1.65 0 00-1.51 1z" />
                            </svg>
                            Ouvrir le panneau d'administration
                        </button>
                    </div>
                </div>
            }

            <!-- Section Gestion des salons -->
            @if (Auth.IsReserved && Auth.IsAuthenticated)
            {
                <div class="settings-card">
                    <div class="card-header">
                        <h2>üè† Gestion des salons</h2>
                    </div>
                    <div class="card-content">
                        <p class="card-description">Cr√©ez vos propres salons de discussion</p>
                        <div class="input-group">
                            <input @bind="newChannelName"
                                   @bind:event="oninput"
                                   placeholder="Nom du nouveau salon..."
                                   maxlength="20"
                                   @onkeyup="HandleChannelKeyPress"
                                   class="input-text" />
                            <button @onclick="CreateChannel"
                                    disabled="@string.IsNullOrWhiteSpace(newChannelName)"
                                    class="btn btn-primary">
                                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                    <line x1="12" y1="5" x2="12" y2="19"></line>
                                    <line x1="5" y1="12" x2="19" y2="12"></line>
                                </svg>
                                Cr√©er
                            </button>
                        </div>
                        @if (!string.IsNullOrEmpty(channelMessage))
                        {
                            <div class="@(channelError ? "alert alert-error" : "alert alert-success")">
                                @channelMessage
                            </div>
                        }
                    </div>
                </div>
            }

            <!-- Section Compte -->
            <div class="settings-card card-danger">
                <div class="card-header">
                    <h2>‚ö†Ô∏è Gestion du compte</h2>
                </div>
                <div class="card-content">
                    @if (Auth.IsReserved)
                    {
                        <div class="danger-zone">
                            <h3>Oublier ce pseudo</h3>
                            <p>Cette action supprimera d√©finitivement la r√©servation de votre pseudo. Vous serez d√©connect√© et ne pourrez plus utiliser ce pseudo r√©serv√©.</p>
                            <button @onclick="ShowForgetConfirmation" class="btn btn-danger">
                                Oublier mon pseudo
                            </button>
                        </div>
                        <div class="logout-zone">
                            <button @onclick="Logout" class="btn btn-secondary">
                                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                    <path d="M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4" />
                                    <polyline points="16 17 21 12 16 7" />
                                    <line x1="21" y1="12" x2="9" y2="12" />
                                </svg>
                                Se d√©connecter
                            </button>
                        </div>
                    }
                    else
                    {
                        <div class="info-zone">
                            <p>En tant qu'invit√©, vous pouvez r√©server votre pseudo pour le prot√©ger.</p>
                            <button @onclick="GoToReserve" class="btn btn-primary">
                                R√©server mon pseudo
                            </button>
                        </div>
                        <div class="logout-zone">
                            <button @onclick="Logout" class="btn btn-secondary">
                                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                    <path d="M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4" />
                                    <polyline points="16 17 21 12 16 7" />
                                    <line x1="21" y1="12" x2="9" y2="12" />
                                </svg>
                                Se d√©connecter
                            </button>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    @if (showForgetModal)
    {
        <div class="modal-overlay" @onclick="HideForgetConfirmation">
            <div class="modal-box" @onclick:stopPropagation="true">
                <h2>‚ö†Ô∏è Confirmer la suppression</h2>
                <p>√ätes-vous s√ªr de vouloir oublier le pseudo <strong>@Auth.Username</strong> ?</p>
                <p class="modal-warning">Cette action est irr√©versible. Vous perdrez d√©finitivement la r√©servation de ce pseudo.</p>
                <div class="modal-actions">
                    <button @onclick="HideForgetConfirmation" class="btn btn-secondary">
                        Annuler
                    </button>
                    <button @onclick="ConfirmForget" class="btn btn-danger">
                        Oui, oublier ce pseudo
                    </button>
                </div>
            </div>
        </div>
    }

    @if (showAdminPanel && Auth.IsAdmin && Auth.UserId.HasValue)
    {
        <AdminPanel CurrentUserId="@Auth.UserId.Value"
                    OnClose="CloseAdminPanel" />
    }
}

@code {
    private bool isInitialized = false;
    private string newChannelName = string.Empty;
    private string channelMessage = string.Empty;
    private bool channelError = false;
    private bool showForgetModal = false;
    private bool showAdminPanel = false;

    protected override async Task OnInitializedAsync()
    {
        await Auth.InitializeAsync();
        isInitialized = true;

        if (!Auth.HasUsername)
        {
            Navigation.NavigateTo("/login");
            return;
        }
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/chat");
    }

    private void GoToReserve()
    {
        Navigation.NavigateTo($"/reserve?username={Uri.EscapeDataString(Auth.Username ?? "")}");
    }

    private void OpenAdminPanel()
    {
        showAdminPanel = true;
    }

    private void CloseAdminPanel()
    {
        showAdminPanel = false;
    }

    private async Task CreateChannel()
    {
        if (string.IsNullOrWhiteSpace(newChannelName)) return;

        channelMessage = "";
        channelError = false;

        var channel = new Channel
        {
            Name = newChannelName.Trim().ToLower(),
            CreatedBy = Auth.Username ?? ""
        };

        try
        {
            if (Auth.IsAuthenticated && !string.IsNullOrEmpty(Auth.Token))
            {
                Http.DefaultRequestHeaders.Authorization =
                    new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", Auth.Token);
            }

            var response = await Http.PostAsJsonAsync("/api/channels", channel);

            if (response.IsSuccessStatusCode)
            {
                channelMessage = $"‚úì Le salon #{newChannelName} a √©t√© cr√©√© avec succ√®s !";
                channelError = false;
                newChannelName = string.Empty;

                await Task.Delay(2000);
                Navigation.NavigateTo("/chat");
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                if (errorContent.Contains("channel_exists"))
                {
                    channelMessage = "‚úó Ce salon existe d√©j√†";
                }
                else
                {
                    channelMessage = "‚úó Erreur lors de la cr√©ation du salon";
                }
                channelError = true;
            }
        }
        catch
        {
            channelMessage = "‚úó Erreur de connexion";
            channelError = true;
        }
    }

    private async Task HandleChannelKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await CreateChannel();
        }
    }

    private void ShowForgetConfirmation()
    {
        showForgetModal = true;
    }

    private void HideForgetConfirmation()
    {
        showForgetModal = false;
    }

    private async Task ConfirmForget()
    {
        showForgetModal = false;
        await Auth.ForgetUsernameAndLogoutAsync();
        Http.DefaultRequestHeaders.Authorization = null;
        Navigation.NavigateTo("/login");
    }

    private async Task Logout()
    {
        await Auth.LogoutAsync();
        Http.DefaultRequestHeaders.Authorization = null;
        Navigation.NavigateTo("/login");
    }
}
