@page "/chat"
@using IrcChat.Shared.Models
@using IrcChat.Client.Services
@using IrcChat.Client.Components
@inject HttpClient Http
@inject ChatService ChatService
@inject UserSessionService UserSession
@inject OAuthStateService OAuthState
@inject NavigationManager Navigation
@implements IAsyncDisposable

<PageTitle>IRC Chat</PageTitle>

@if (!isInitialized)
{
    <div class="loading">
        <div class="spinner"></div>
        <p>Chargement...</p>
    </div>
}
else if (!UserSession.IsLoggedIn && !OAuthState.IsAuthenticated)
{
    <p>Redirection vers la page de connexion...</p>
}
else
{
    <div class="chat-container">
        <Sidebar Username="@currentUsername"
                 AvatarUrl="@avatarUrl"
                 IsOAuthUser="@OAuthState.IsAuthenticated"
                 CurrentChannel="@currentChannel"
                 Channels="@channels"
                 Users="@users"
                 OnChannelSelected="SwitchChannel"
                 OnChannelCreated="CreateChannel"
                 OnLogoutClicked="Logout" />

        <ChatArea Username="@currentUsername"
                  CurrentChannel="@currentChannel"
                  IsConnected="@isConnected"
                  Messages="@messages"
                  OnMessageSent="SendMessage" />
    </div>
}

@code {
    private string currentChannel = "";
    private string currentUsername = "";
    private string? avatarUrl = null;
    private List<Message> messages = new();
    private List<Channel> channels = new();
    private List<User> users = new();
    private bool isConnected = false;
    private bool isInitialized = false;

    protected override async Task OnInitializedAsync()
    {
        await OAuthState.InitializeAsync();
        await UserSession.InitializeAsync();
        isInitialized = true;

        if (!UserSession.IsLoggedIn && !OAuthState.IsAuthenticated)
        {
            Navigation.NavigateTo("/oauth-login");
            return;
        }

        currentUsername = OAuthState.IsAuthenticated 
            ? OAuthState.Username ?? "" 
            : UserSession.Username ?? "";
            
        avatarUrl = OAuthState.AvatarUrl;

        if (!string.IsNullOrEmpty(currentUsername))
        {
            if (OAuthState.IsAuthenticated && !string.IsNullOrEmpty(OAuthState.Token))
            {
                Http.DefaultRequestHeaders.Authorization = 
                    new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", OAuthState.Token);
            }

            await LoadChannels();
            await InitializeSignalR();
        }
    }

    private async Task InitializeSignalR()
    {
        ChatService.OnMessageReceived += OnMessageReceived;
        ChatService.OnUserJoined += OnUserJoined;
        ChatService.OnUserLeft += OnUserLeft;
        ChatService.OnUserListUpdated += OnUserListUpdated;

        try
        {
            await ChatService.InitializeAsync(OAuthState.Token);
            isConnected = true;
            StateHasChanged();
        }
        catch
        {
            isConnected = false;
        }
    }

    private void OnMessageReceived(Message message)
    {
        if (message.Channel == currentChannel)
        {
            messages.Add(message);
            InvokeAsync(StateHasChanged);
        }
    }

    private void OnUserJoined(string user, string channel)
    {
        if (channel == currentChannel)
        {
            InvokeAsync(StateHasChanged);
        }
    }

    private void OnUserLeft(string user, string channel)
    {
        if (channel == currentChannel)
        {
            InvokeAsync(StateHasChanged);
        }
    }

    private void OnUserListUpdated(List<User> updatedUsers)
    {
        users = updatedUsers;
        InvokeAsync(StateHasChanged);
    }

    private async Task Logout()
    {
        if (!string.IsNullOrEmpty(currentChannel))
        {
            await ChatService.LeaveChannel(currentChannel);
        }
        
        currentChannel = "";
        channels.Clear();
        messages.Clear();
        users.Clear();
        isConnected = false;
        
        if (OAuthState.IsAuthenticated)
        {
            await OAuthState.ClearAuthStateAsync();
            Http.DefaultRequestHeaders.Authorization = null;
        }
        
        if (UserSession.IsLoggedIn)
        {
            await UserSession.ClearSessionAsync();
        }
        
        Navigation.NavigateTo("/oauth-login");
    }

    private async Task CreateChannel(string channelName)
    {
        var channel = new Channel { Name = channelName };
        
        try
        {
            await Http.PostAsJsonAsync("/api/channels", channel);
            await LoadChannels();
            await SwitchChannel(channelName);
        }
        catch { }
    }

    private async Task SwitchChannel(string channel)
    {
        if (!string.IsNullOrEmpty(currentChannel))
        {
            await ChatService.LeaveChannel(currentChannel);
        }

        currentChannel = channel;
        await LoadMessages();
        await ChatService.JoinChannel(currentUsername, channel);
    }

    private async Task LoadChannels()
    {
        try
        {
            var result = await Http.GetFromJsonAsync<List<Channel>>("/api/channels");
            if (result != null)
            {
                channels = result;
            }
        }
        catch { }
    }

    private async Task LoadMessages()
    {
        try
        {
            var result = await Http.GetFromJsonAsync<List<Message>>($"/api/messages/{currentChannel}");
            if (result != null)
            {
                messages = result;
            }
        }
        catch { }
    }

    private async Task SendMessage(string content)
    {
        if (!string.IsNullOrEmpty(currentUsername) && isConnected)
        {
            var req = new SendMessageRequest
            {
                Username = currentUsername,
                Content = content,
                Channel = currentChannel
            };

            try
            {
                await ChatService.SendMessage(req);
            }
            catch { }
        }
    }

    public async ValueTask DisposeAsync()
    {
        ChatService.OnMessageReceived -= OnMessageReceived;
        ChatService.OnUserJoined -= OnUserJoined;
        ChatService.OnUserLeft -= OnUserLeft;
        ChatService.OnUserListUpdated -= OnUserListUpdated;
        
        await ChatService.DisposeAsync();
    }
}