@* src/IrcChat.Client/Pages/Chat.razor *@
@page "/chat"
@using IrcChat.Shared.Models
@using IrcChat.Client.Services
@using IrcChat.Client.Components
@inject HttpClient Http
@inject ChatService ChatService
@inject UnifiedAuthService Auth
@inject PrivateMessageService PrivateMessageService
@inject NavigationManager Navigation
@implements IAsyncDisposable

<PageTitle>IRC Chat</PageTitle>

@if (!isInitialized)
{
    <div class="loading">
        <div class="spinner"></div>
        <p>Chargement...</p>
    </div>
}
else if (!Auth.HasUsername)
{
    <p>Redirection vers la page de connexion...</p>
}
else
{
    <div class="chat-container">
        <Sidebar Username="@currentUsername"
                 AvatarUrl="@avatarUrl"
                 IsOAuthUser="@Auth.IsReserved"
                 IsAdmin="@Auth.IsAdmin"
                 CurrentChannel="@currentChannel"
                 Channels="@channels"
                 Users="@users"
                 PrivateConversations="@privateConversations"
                 OnChannelSelected="SwitchChannel"
                 OnUserClicked="OpenPrivateChat"
                 OnPrivateConversationSelected="OpenPrivateChat"
                 OnConversationDeleted="DeleteConversation"
                 OnUserInfoClicked="GoToSettings" />

        <ChatArea Username="@currentUsername"
                  CurrentChannel="@currentChannel"
                  IsConnected="@isConnected"
                  Messages="@messages"
                  Users="@users"
                  IsMuted="@isCurrentChannelMuted"
                  CanManage="@CanManageCurrentChannel()"
                  OnMessageSent="SendMessage"
                  OnUserClicked="HandleUserClicked"
                  OnMuteStatusChanged="HandleMuteStatusChanged" />
    </div>

    @if (showPrivateChat && !string.IsNullOrEmpty(selectedPrivateUser))
    {
        <PrivateChatWindow CurrentUsername="@currentUsername"
                           OtherUsername="@selectedPrivateUser"
                           Messages="@privateMessages"
                           IsConnected="@isConnected"
                           OnSendMessage="SendPrivateMessage"
                           OnClose="ClosePrivateChat" />
    }

    @if (!string.IsNullOrEmpty(muteNotification))
    {
        <div class="mute-notification">
            @muteNotification
        </div>
    }
}

@code {
    private string currentChannel = "";
    private string currentUsername = "";
    private string? avatarUrl = null;
    private List<Message> messages = new();
    private List<Channel> channels = new();
    private List<User> users = new();
    private bool isConnected = false;
    private bool isInitialized = false;
    private bool isCurrentChannelMuted = false;
    private string muteNotification = "";

    // Messages privés
    private List<PrivateConversation> privateConversations = new();
    private List<PrivateMessage> privateMessages = new();
    private string? selectedPrivateUser = null;
    private bool showPrivateChat = false;

    protected override async Task OnInitializedAsync()
    {
        await Auth.InitializeAsync();
        isInitialized = true;

        if (!Auth.HasUsername)
        {
            Navigation.NavigateTo("/login");
            return;
        }

        currentUsername = Auth.Username!;
        avatarUrl = Auth.AvatarUrl;

        if (!string.IsNullOrEmpty(currentUsername))
        {
            if (Auth.IsAuthenticated && !string.IsNullOrEmpty(Auth.Token))
            {
                Http.DefaultRequestHeaders.Authorization =
                    new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", Auth.Token);
            }

            await LoadChannels();
            await InitializeSignalR();
            await LoadPrivateConversations();
        }
    }

    private async Task InitializeSignalR()
    {
        ChatService.OnMessageReceived += OnMessageReceived;
        ChatService.OnUserJoined += OnUserJoined;
        ChatService.OnUserLeft += OnUserLeft;
        ChatService.OnUserListUpdated += OnUserListUpdated;

        PrivateMessageService.OnPrivateMessageReceived += OnPrivateMessageReceived;
        PrivateMessageService.OnPrivateMessageSent += OnPrivateMessageSent;
        PrivateMessageService.OnUnreadCountChanged += OnUnreadCountChanged;
        PrivateMessageService.OnConversationDeleted += OnConversationDeleted;

        try
        {
            await ChatService.InitializeAsync(Auth.Token);
            isConnected = true;

            // Écouter les changements de statut mute
            ChatService.OnChannelMuteStatusChanged += OnChannelMuteStatusChanged;
            ChatService.OnMessageBlocked += OnMessageBlocked;

            StateHasChanged();
        }
        catch
        {
            isConnected = false;
        }
    }

    // Handlers pour canaux publics
    private void OnMessageReceived(Message message)
    {
        if (message.Channel == currentChannel)
        {
            messages.Add(message);
            InvokeAsync(StateHasChanged);
        }
    }

    private void OnUserJoined(string user, string channel)
    {
        if (channel == currentChannel)
        {
            InvokeAsync(StateHasChanged);
        }
    }

    private void OnUserLeft(string user, string channel)
    {
        if (channel == currentChannel)
        {
            InvokeAsync(StateHasChanged);
        }
    }

    private void OnUserListUpdated(List<User> updatedUsers)
    {
        users = updatedUsers;
        InvokeAsync(StateHasChanged);
    }

    // Nouveaux handlers pour le mute
    private void OnChannelMuteStatusChanged(string channel, bool isMuted)
    {
        if (channel == currentChannel)
        {
            isCurrentChannelMuted = isMuted;
            InvokeAsync(StateHasChanged);
        }
    }

    private void OnMessageBlocked(string reason)
    {
        muteNotification = reason;
        InvokeAsync(async () =>
        {
            StateHasChanged();
            await Task.Delay(4000);
            muteNotification = "";
            StateHasChanged();
        });
    }

    // Handlers pour messages privés
    private void OnPrivateMessageReceived(PrivateMessage message)
    {
        if (message.SenderUsername == selectedPrivateUser || message.RecipientUsername == selectedPrivateUser)
        {
            privateMessages.Add(message);

            if (showPrivateChat && message.SenderUsername == selectedPrivateUser)
            {
                _ = ChatService.MarkPrivateMessagesAsRead(selectedPrivateUser);
            }
        }

        InvokeAsync(async () =>
        {
            await LoadPrivateConversations();
            StateHasChanged();
        });
    }

    private void OnPrivateMessageSent(PrivateMessage message)
    {
        if (message.RecipientUsername == selectedPrivateUser)
        {
            privateMessages.Add(message);
        }

        InvokeAsync(async () =>
        {
            await LoadPrivateConversations();
            StateHasChanged();
        });
    }

    private void OnUnreadCountChanged()
    {
        InvokeAsync(async () =>
        {
            await LoadPrivateConversations();
            StateHasChanged();
        });
    }

    private void OnConversationDeleted(string username)
    {
        if (selectedPrivateUser == username)
        {
            ClosePrivateChat();
        }

        InvokeAsync(async () =>
        {
            await LoadPrivateConversations();
            StateHasChanged();
        });
    }

    // Actions
    private void GoToSettings()
    {
        Navigation.NavigateTo("/settings");
    }

    private async Task SwitchChannel(string channel)
    {
        if (!string.IsNullOrEmpty(currentChannel))
        {
            await ChatService.LeaveChannel(currentChannel);
        }

        currentChannel = channel;
        await LoadMessages();
        await ChatService.JoinChannel(currentUsername, channel);

        // Charger le statut mute
        var channelInfo = channels.FirstOrDefault(c => c.Name == channel);
        isCurrentChannelMuted = channelInfo?.IsMuted ?? false;
    }

    private async Task LoadChannels()
    {
        try
        {
            var result = await Http.GetFromJsonAsync<List<Channel>>("/api/channels");
            if (result != null)
            {
                channels = result;
            }
        }
        catch { }
    }

    private async Task LoadMessages()
    {
        try
        {
            var result = await Http.GetFromJsonAsync<List<Message>>($"/api/messages/{currentChannel}");
            if (result != null)
            {
                messages = result;
            }
        }
        catch { }
    }

    private async Task SendMessage(string content)
    {
        if (!string.IsNullOrEmpty(currentUsername) && isConnected)
        {
            var req = new SendMessageRequest
            {
                Username = currentUsername,
                Content = content,
                Channel = currentChannel
            };

            try
            {
                await ChatService.SendMessage(req);
            }
            catch { }
        }
    }

    private async Task HandleUserClicked(string username)
    {
        if (username != currentUsername)
        {
            await OpenPrivateChat(username);
        }
    }

    // Méthodes pour messages privés
    private async Task LoadPrivateConversations()
    {
        privateConversations = await PrivateMessageService.GetConversationsAsync(currentUsername);
    }

    private async Task OpenPrivateChat(string username)
    {
        selectedPrivateUser = username;
        showPrivateChat = true;

        privateMessages = await PrivateMessageService.GetPrivateMessagesAsync(currentUsername, username);

        await ChatService.MarkPrivateMessagesAsRead(username);
        await LoadPrivateConversations();

        StateHasChanged();
    }

    private void ClosePrivateChat()
    {
        showPrivateChat = false;
        selectedPrivateUser = null;
        privateMessages.Clear();
        StateHasChanged();
    }

    private async Task SendPrivateMessage(string content)
    {
        if (string.IsNullOrEmpty(selectedPrivateUser) || !isConnected)
            return;

        var request = new SendPrivateMessageRequest
        {
            SenderUsername = currentUsername,
            RecipientUsername = selectedPrivateUser,
            Content = content
        };

        try
        {
            await ChatService.SendPrivateMessage(request);
        }
        catch { }
    }

    private async Task DeleteConversation(string otherUsername)
    {
        var success = await PrivateMessageService.DeleteConversationAsync(currentUsername, otherUsername);

        if (success)
        {
            if (selectedPrivateUser == otherUsername)
            {
                ClosePrivateChat();
            }

            await LoadPrivateConversations();
            StateHasChanged();
        }
    }

    private async Task HandleMuteStatusChanged(bool isMuted)
    {
        isCurrentChannelMuted = isMuted;

        // Recharger les informations du canal
        await LoadChannels();

        StateHasChanged();
    }

    private bool CanManageCurrentChannel()
    {
        if (string.IsNullOrEmpty(currentChannel)) return false;

        var channel = channels.FirstOrDefault(c => c.Name == currentChannel);
        if (channel == null) return false;

        bool isCreator = channel.CreatedBy.Equals(currentUsername, StringComparison.OrdinalIgnoreCase);
        bool isAdmin = Auth.IsAdmin;

        return isCreator || isAdmin;
    }

    public async ValueTask DisposeAsync()
    {
        ChatService.OnMessageReceived -= OnMessageReceived;
        ChatService.OnUserJoined -= OnUserJoined;
        ChatService.OnUserLeft -= OnUserLeft;
        ChatService.OnUserListUpdated -= OnUserListUpdated;
        ChatService.OnChannelMuteStatusChanged -= OnChannelMuteStatusChanged;
        ChatService.OnMessageBlocked -= OnMessageBlocked;

        PrivateMessageService.OnPrivateMessageReceived -= OnPrivateMessageReceived;
        PrivateMessageService.OnPrivateMessageSent -= OnPrivateMessageSent;
        PrivateMessageService.OnUnreadCountChanged -= OnUnreadCountChanged;
        PrivateMessageService.OnConversationDeleted -= OnConversationDeleted;

        await ChatService.DisposeAsync();
    }
}