@page "/"
@page "/oauth-login"
@using IrcChat.Shared.Models
@using IrcChat.Client.Services
@inject HttpClient Http
@inject OAuthStateService OAuthState
@inject OAuthClientService OAuthClient
@inject NavigationManager Navigation

<PageTitle>Connexion - IRC Chat</PageTitle>

<div class="login-fullscreen">
    <div class="login-card oauth">
        <div class="login-header">
            <h1>💬 IRC Chat</h1>
            <h2>Bienvenue</h2>
            <p>Réservez votre pseudo ou continuez en tant qu'invité</p>
        </div>

        <div class="oauth-section">
            <h3>Se connecter avec</h3>
            <div class="oauth-buttons">
                <button class="oauth-btn google" @onclick="() => LoginWithProvider(ExternalAuthProvider.Google)">
                    <svg width="18" height="18" viewBox="0 0 18 18">
                        <path fill="#4285F4" d="M16.51 8H8.98v3h4.3c-.18 1-.74 1.48-1.6 2.04v2.01h2.6a7.8 7.8 0 0 0 2.38-5.88c0-.57-.05-.66-.15-1.18Z" />
                        <path fill="#34A853" d="M8.98 17c2.16 0 3.97-.72 5.3-1.94l-2.6-2a4.8 4.8 0 0 1-7.18-2.54H1.83v2.07A8 8 0 0 0 8.98 17Z" />
                        <path fill="#FBBC05" d="M4.5 10.52a4.8 4.8 0 0 1 0-3.04V5.41H1.83a8 8 0 0 0 0 7.18l2.67-2.07Z" />
                        <path fill="#EA4335" d="M8.98 4.18c1.17 0 2.23.4 3.06 1.2l2.3-2.3A8 8 0 0 0 1.83 5.4L4.5 7.49a4.77 4.77 0 0 1 4.48-3.3Z" />
                    </svg>
                    Google
                </button>

                <button class="oauth-btn facebook" @onclick="() => LoginWithProvider(ExternalAuthProvider.Facebook)">
                    <svg width="18" height="18" viewBox="0 0 24 24" fill="#1877F2">
                        <path d="M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z" />
                    </svg>
                    Facebook
                </button>

                <button class="oauth-btn twitter" @onclick="() => LoginWithProvider(ExternalAuthProvider.Twitter)">
                    <svg width="18" height="18" viewBox="0 0 24 24" fill="#1DA1F2">
                        <path d="M23.953 4.57a10 10 0 01-2.825.775 4.958 4.958 0 002.163-2.723c-.951.555-2.005.959-3.127 1.184a4.92 4.92 0 00-8.384 4.482C7.69 8.095 4.067 6.13 1.64 3.162a4.822 4.822 0 00-.666 2.475c0 1.71.87 3.213 2.188 4.096a4.904 4.904 0 01-2.228-.616v.06a4.923 4.923 0 003.946 4.827 4.996 4.996 0 01-2.212.085 4.936 4.936 0 004.604 3.417 9.867 9.867 0 01-6.102 2.105c-.39 0-.779-.023-1.17-.067a13.995 13.995 0 007.557 2.209c9.053 0 13.998-7.496 13.998-13.985 0-.21 0-.42-.015-.63A9.935 9.935 0 0024 4.59z" />
                    </svg>
                    Twitter
                </button>

                <button class="oauth-btn microsoft" @onclick="() => LoginWithProvider(ExternalAuthProvider.Microsoft)">
                    <svg width="18" height="18" viewBox="0 0 23 23">
                        <path fill="#f3f3f3" d="M0 0h23v23H0z" />
                        <path fill="#f35325" d="M1 1h10v10H1z" />
                        <path fill="#81bc06" d="M12 1h10v10H12z" />
                        <path fill="#05a6f0" d="M1 12h10v10H1z" />
                        <path fill="#ffba08" d="M12 12h10v10H12z" />
                    </svg>
                    Microsoft
                </button>
            </div>
        </div>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="error-message">
                <span>⚠️</span> @errorMessage
            </div>
        }

        @if (isLoading)
        {
            <div class="loading-message">
                <div class="spinner"></div>
                <span>Redirection vers @currentProvider...</span>
            </div>
        }

        <div class="divider">
            <span>OU</span>
        </div>

        <a href="/login" class="guest-link">
            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2" />
                <circle cx="12" cy="7" r="4" />
            </svg>
            Continuer en tant qu'invité
        </a>
    </div>
</div>

@code {
    private string errorMessage = "";
    private bool isLoading = false;
    private string currentProvider = "";

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine($"OAuthLogin: OnInitializedAsync called IsAuthenticated: {OAuthState.IsAuthenticated}, Username: {OAuthState.Username}");
        if (OAuthState.IsAuthenticated)
        {
            if (string.IsNullOrEmpty(OAuthState.Username))
            {
                Navigation.NavigateTo("/choose-username");
            }
            else
            {
                Navigation.NavigateTo("/chat");
            }
            return;
        }

        var uri = new Uri(Navigation.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
        var code = query["code"];
        var state = query["state"];
        var error = query["error"];

        if (!string.IsNullOrEmpty(error))
        {
            errorMessage = $"Erreur d'authentification: {error}";
            return;
        }

        if (!string.IsNullOrEmpty(code) && !string.IsNullOrEmpty(state))
        {
            await HandleOAuthCallback(code, state);
        }
    }

    private async Task LoginWithProvider(ExternalAuthProvider provider)
    {
        isLoading = true;
        currentProvider = provider.ToString();
        errorMessage = "";
        StateHasChanged();

        try
        {
            var redirectUri = $"{Navigation.BaseUri}oauth-login";
            var authUrl = await OAuthClient.InitiateAuthorizationFlowAsync(provider, redirectUri);

            Navigation.NavigateTo(authUrl, forceLoad: true);
        }
        catch (Exception ex)
        {
            errorMessage = $"Erreur lors de l'initialisation: {ex.Message}";
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task HandleOAuthCallback(string code, string state)
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            var redirectUri = $"{Navigation.BaseUri}oauth-login";
            var result = await OAuthClient.HandleCallbackAsync(code, state, redirectUri);

            if (result != null)
            {
                await OAuthState.SetAuthStateAsync(
                    result.Token,
                    result.Username,
                    result.Email,
                    result.AvatarUrl,
                    result.UserId
                );

                Http.DefaultRequestHeaders.Authorization =
                    new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", result.Token);

                if (result.IsNewUser || string.IsNullOrEmpty(result.Username))
                {
                    Navigation.NavigateTo("/choose-username");
                }
                else
                {
                    Navigation.NavigateTo("/chat");
                }
            }
            else
            {
                errorMessage = "Échec de l'authentification. Veuillez réessayer.";
                Navigation.NavigateTo("/oauth-login", forceLoad: true);
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Erreur lors de l'authentification: {ex.Message}";
            Navigation.NavigateTo("/oauth-login", forceLoad: true);
        }
        finally
        {
            isLoading = false;
        }
    }
}
