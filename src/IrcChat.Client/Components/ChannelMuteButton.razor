@* src/IrcChat.Client/Components/ChannelMuteButton.razor *@
@inject HttpClient Http

<div class="channel-mute-control">
    @if (CanManage)
    {
        <button class="mute-btn @(IsMuted ? "muted" : "")"
                @onclick="ToggleMute"
                disabled="@isProcessing"
                title="@(IsMuted ? "Activer le salon" : "Muter le salon")">
            @if (isProcessing)
            {
                <span class="spinner-small"></span>
            }
            else if (IsMuted)
            {
                <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <path d="M11 5L6 9H2v6h4l5 4V5z"></path>
                    <line x1="23" y1="9" x2="17" y2="15"></line>
                    <line x1="17" y1="9" x2="23" y2="15"></line>
                </svg>
                <span>Salon muet</span>
            }
            else
            {
                <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <polygon points="11 5 6 9 2 9 2 15 6 15 11 19 11 5"></polygon>
                    <path d="M19.07 4.93a10 10 0 0 1 0 14.14M15.54 8.46a5 5 0 0 1 0 7.07"></path>
                </svg>
                <span>Muter le salon</span>
            }
        </button>
    }
    else if (IsMuted)
    {
        <div class="muted-indicator">
            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M11 5L6 9H2v6h4l5 4V5z"></path>
                <line x1="23" y1="9" x2="17" y2="15"></line>
                <line x1="17" y1="9" x2="23" y2="15"></line>
            </svg>
            <span>Salon muet</span>
        </div>
    }
</div>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="error-toast">@errorMessage</div>
}

@code {
    [Parameter]
    public string ChannelName { get; set; } = string.Empty;

    [Parameter]
    public bool IsMuted { get; set; }

    [Parameter]
    public bool CanManage { get; set; }

    [Parameter]
    public EventCallback<bool> OnMuteStatusChanged { get; set; }

    private bool isProcessing = false;
    private string errorMessage = string.Empty;

    private async Task ToggleMute()
    {
        if (isProcessing || string.IsNullOrEmpty(ChannelName)) return;

        isProcessing = true;
        errorMessage = string.Empty;
        StateHasChanged();

        try
        {
            var response = await Http.PostAsync(
                $"/api/channels/{Uri.EscapeDataString(ChannelName)}/toggle-mute",
                null);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<MuteToggleResponse>();
                if (result != null)
                {
                    await OnMuteStatusChanged.InvokeAsync(result.IsMuted);
                }
            }
            else
            {
                errorMessage = "Erreur lors du changement du statut";
                await Task.Delay(3000);
                errorMessage = string.Empty;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Erreur: {ex.Message}";
            await Task.Delay(3000);
            errorMessage = string.Empty;
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }

    private class MuteToggleResponse
    {
        public string ChannelName { get; set; } = string.Empty;
        public bool IsMuted { get; set; }
        public string ChangedBy { get; set; } = string.Empty;
    }
}