@using IrcChat.Shared.Models

<div class="sidebar">
    <div class="user-info">
        @if (!string.IsNullOrEmpty(AvatarUrl))
        {
            <img src="@AvatarUrl" alt="Avatar" class="avatar" />
        }
        else
        {
            <span class="avatar-placeholder">👤</span>
        }
        <div class="user-details">
            <span class="current-user">@Username</span>
            @if (IsOAuthUser)
            {
                <span class="badge verified">✓ Réservé</span>

                <button class="btn-forget-small" @onclick="OnForgetUsernameClicked">
                    Oublier ce pseudo
                </button>
            }
            else
            {
                <span class="badge guest">Invité</span>
            }
        </div>
        <button class="logout-btn" @onclick="OnLogoutClicked">
            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4" />
                <polyline points="16 17 21 12 16 7" />
                <line x1="21" y1="12" x2="9" y2="12" />
            </svg>
        </button>
    </div>

    <div class="channels-section">
        <h3>Canaux</h3>
        @if (IsOAuthUser)
        {
            <ChannelCreator OnChannelCreated="OnChannelCreated" />
        }

        <ul class="channel-list">
            @foreach (var ch in Channels)
            {
                <li class="@(ch.Name == CurrentChannel ? "active" : "")"
                    @onclick="() => OnChannelSelected.InvokeAsync(ch.Name)">
                    <span class="channel-hash">#</span>@ch.Name
                </li>
            }
        </ul>
    </div>

    <PrivateConversations Conversations="PrivateConversations"
                          SelectedUser="SelectedPrivateUser"
                          OnConversationSelected="OnPrivateConversationSelected" />

    <div class="admin-link">
        <a href="/admin">
            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M12 15a3 3 0 100-6 3 3 0 000 6z" />
                <path d="M19.4 15a1.65 1.65 0 00.33 1.82l.06.06a2 2 0 010 2.83 2 2 0 01-2.83 0l-.06-.06a1.65 1.65 0 00-1.82-.33 1.65 1.65 0 00-1 1.51V21a2 2 0 01-2 2 2 2 0 01-2-2v-.09A1.65 1.65 0 009 19.4a1.65 1.65 0 00-1.82.33l-.06.06a2 2 0 01-2.83 0 2 2 0 010-2.83l.06-.06a1.65 1.65 0 00.33-1.82 1.65 1.65 0 00-1.51-1H3a2 2 0 01-2-2 2 2 0 012-2h.09A1.65 1.65 0 004.6 9a1.65 1.65 0 00-.33-1.82l-.06-.06a2 2 0 010-2.83 2 2 0 012.83 0l.06.06a1.65 1.65 0 001.82.33H9a1.65 1.65 0 001-1.51V3a2 2 0 012-2 2 2 0 012 2v.09a1.65 1.65 0 001 1.51 1.65 1.65 0 001.82-.33l.06-.06a2 2 0 012.83 0 2 2 0 010 2.83l-.06.06a1.65 1.65 0 00-.33 1.82V9a1.65 1.65 0 001.51 1H21a2 2 0 012 2 2 2 0 01-2 2h-.09a1.65 1.65 0 00-1.51 1z" />
            </svg>
            Administration
        </a>
    </div>
</div>

@code {
    private string newChannel = string.Empty;

    [Parameter]
    public string Username { get; set; } = string.Empty;

    [Parameter]
    public string? AvatarUrl { get; set; }

    [Parameter]
    public bool IsOAuthUser { get; set; }

    [Parameter]
    public string CurrentChannel { get; set; } = string.Empty;

    [Parameter]
    public List<Channel> Channels { get; set; } = new();

    [Parameter]
    public List<User> Users { get; set; } = new();

    [Parameter]
    public List<PrivateConversation> PrivateConversations { get; set; } = new();

    [Parameter]
    public string? SelectedPrivateUser { get; set; }

    [Parameter]
    public EventCallback<string> OnChannelSelected { get; set; }

    [Parameter]
    public EventCallback<string> OnChannelCreated { get; set; }

    [Parameter]
    public EventCallback<string> OnUserClicked { get; set; }

    [Parameter]
    public EventCallback<string> OnPrivateConversationSelected { get; set; }

    [Parameter]
    public EventCallback OnLogoutClicked { get; set; }

    [Parameter]
    public EventCallback OnForgetUsernameClicked { get; set; }

    private async Task HandleUserClicked(string username)
    {
        if (username != Username)
        {
            await OnUserClicked.InvokeAsync(username);
        }
    }
}